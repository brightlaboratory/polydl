Extract tasks...
ANTLR runtime and generated code versions disagree: 4.8!=4.7.2
ANTLR runtime and generated code versions disagree: 4.8!=4.7.2
v0.0.4
def @main(%data: Tensor[(1, 3, 224, 224), float32], %bn_data_gamma: Tensor[(3), float32], %bn_data_beta: Tensor[(3), float32], %bn_data_moving_mean: Tensor[(3), float32], %bn_data_moving_var: Tensor[(3), float32], %conv0_weight: Tensor[(64, 3, 7, 7), float32], %bn0_gamma: Tensor[(64), float32], %bn0_beta: Tensor[(64), float32], %bn0_moving_mean: Tensor[(64), float32], %bn0_moving_var: Tensor[(64), float32], %stage1_unit1_bn1_gamma: Tensor[(64), float32], %stage1_unit1_bn1_beta: Tensor[(64), float32], %stage1_unit1_bn1_moving_mean: Tensor[(64), float32], %stage1_unit1_bn1_moving_var: Tensor[(64), float32], %stage1_unit1_conv1_weight: Tensor[(64, 64, 1, 1), float32], %stage1_unit1_bn2_gamma: Tensor[(64), float32], %stage1_unit1_bn2_beta: Tensor[(64), float32], %stage1_unit1_bn2_moving_mean: Tensor[(64), float32], %stage1_unit1_bn2_moving_var: Tensor[(64), float32], %stage1_unit1_conv2_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit1_bn3_gamma: Tensor[(64), float32], %stage1_unit1_bn3_beta: Tensor[(64), float32], %stage1_unit1_bn3_moving_mean: Tensor[(64), float32], %stage1_unit1_bn3_moving_var: Tensor[(64), float32], %stage1_unit1_conv3_weight: Tensor[(256, 64, 1, 1), float32], %stage1_unit1_sc_weight: Tensor[(256, 64, 1, 1), float32], %stage1_unit2_bn1_gamma: Tensor[(256), float32], %stage1_unit2_bn1_beta: Tensor[(256), float32], %stage1_unit2_bn1_moving_mean: Tensor[(256), float32], %stage1_unit2_bn1_moving_var: Tensor[(256), float32], %stage1_unit2_conv1_weight: Tensor[(64, 256, 1, 1), float32], %stage1_unit2_bn2_gamma: Tensor[(64), float32], %stage1_unit2_bn2_beta: Tensor[(64), float32], %stage1_unit2_bn2_moving_mean: Tensor[(64), float32], %stage1_unit2_bn2_moving_var: Tensor[(64), float32], %stage1_unit2_conv2_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit2_bn3_gamma: Tensor[(64), float32], %stage1_unit2_bn3_beta: Tensor[(64), float32], %stage1_unit2_bn3_moving_mean: Tensor[(64), float32], %stage1_unit2_bn3_moving_var: Tensor[(64), float32], %stage1_unit2_conv3_weight: Tensor[(256, 64, 1, 1), float32], %stage1_unit3_bn1_gamma: Tensor[(256), float32], %stage1_unit3_bn1_beta: Tensor[(256), float32], %stage1_unit3_bn1_moving_mean: Tensor[(256), float32], %stage1_unit3_bn1_moving_var: Tensor[(256), float32], %stage1_unit3_conv1_weight: Tensor[(64, 256, 1, 1), float32], %stage1_unit3_bn2_gamma: Tensor[(64), float32], %stage1_unit3_bn2_beta: Tensor[(64), float32], %stage1_unit3_bn2_moving_mean: Tensor[(64), float32], %stage1_unit3_bn2_moving_var: Tensor[(64), float32], %stage1_unit3_conv2_weight: Tensor[(64, 64, 3, 3), float32], %stage1_unit3_bn3_gamma: Tensor[(64), float32], %stage1_unit3_bn3_beta: Tensor[(64), float32], %stage1_unit3_bn3_moving_mean: Tensor[(64), float32], %stage1_unit3_bn3_moving_var: Tensor[(64), float32], %stage1_unit3_conv3_weight: Tensor[(256, 64, 1, 1), float32], %stage2_unit1_bn1_gamma: Tensor[(256), float32], %stage2_unit1_bn1_beta: Tensor[(256), float32], %stage2_unit1_bn1_moving_mean: Tensor[(256), float32], %stage2_unit1_bn1_moving_var: Tensor[(256), float32], %stage2_unit1_conv1_weight: Tensor[(128, 256, 1, 1), float32], %stage2_unit1_bn2_gamma: Tensor[(128), float32], %stage2_unit1_bn2_beta: Tensor[(128), float32], %stage2_unit1_bn2_moving_mean: Tensor[(128), float32], %stage2_unit1_bn2_moving_var: Tensor[(128), float32], %stage2_unit1_conv2_weight: Tensor[(128, 128, 3, 3), float32], %stage2_unit1_bn3_gamma: Tensor[(128), float32], %stage2_unit1_bn3_beta: Tensor[(128), float32], %stage2_unit1_bn3_moving_mean: Tensor[(128), float32], %stage2_unit1_bn3_moving_var: Tensor[(128), float32], %stage2_unit1_conv3_weight: Tensor[(512, 128, 1, 1), float32], %stage2_unit1_sc_weight: Tensor[(512, 256, 1, 1), float32], %stage2_unit2_bn1_gamma: Tensor[(512), float32], %stage2_unit2_bn1_beta: Tensor[(512), float32], %stage2_unit2_bn1_moving_mean: Tensor[(512), float32], %stage2_unit2_bn1_moving_var: Tensor[(512), float32], %stage2_unit2_conv1_weight: Tensor[(128, 512, 1, 1), float32], %stage2_unit2_bn2_gamma: Tensor[(128), float32], %stage2_unit2_bn2_beta: Tensor[(128), float32], %stage2_unit2_bn2_moving_mean: Tensor[(128), float32], %stage2_unit2_bn2_moving_var: Tensor[(128), float32], %stage2_unit2_conv2_weight: Tensor[(128, 128, 3, 3), float32], %stage2_unit2_bn3_gamma: Tensor[(128), float32], %stage2_unit2_bn3_beta: Tensor[(128), float32], %stage2_unit2_bn3_moving_mean: Tensor[(128), float32], %stage2_unit2_bn3_moving_var: Tensor[(128), float32], %stage2_unit2_conv3_weight: Tensor[(512, 128, 1, 1), float32], %stage2_unit3_bn1_gamma: Tensor[(512), float32], %stage2_unit3_bn1_beta: Tensor[(512), float32], %stage2_unit3_bn1_moving_mean: Tensor[(512), float32], %stage2_unit3_bn1_moving_var: Tensor[(512), float32], %stage2_unit3_conv1_weight: Tensor[(128, 512, 1, 1), float32], %stage2_unit3_bn2_gamma: Tensor[(128), float32], %stage2_unit3_bn2_beta: Tensor[(128), float32], %stage2_unit3_bn2_moving_mean: Tensor[(128), float32], %stage2_unit3_bn2_moving_var: Tensor[(128), float32], %stage2_unit3_conv2_weight: Tensor[(128, 128, 3, 3), float32], %stage2_unit3_bn3_gamma: Tensor[(128), float32], %stage2_unit3_bn3_beta: Tensor[(128), float32], %stage2_unit3_bn3_moving_mean: Tensor[(128), float32], %stage2_unit3_bn3_moving_var: Tensor[(128), float32], %stage2_unit3_conv3_weight: Tensor[(512, 128, 1, 1), float32], %stage2_unit4_bn1_gamma: Tensor[(512), float32], %stage2_unit4_bn1_beta: Tensor[(512), float32], %stage2_unit4_bn1_moving_mean: Tensor[(512), float32], %stage2_unit4_bn1_moving_var: Tensor[(512), float32], %stage2_unit4_conv1_weight: Tensor[(128, 512, 1, 1), float32], %stage2_unit4_bn2_gamma: Tensor[(128), float32], %stage2_unit4_bn2_beta: Tensor[(128), float32], %stage2_unit4_bn2_moving_mean: Tensor[(128), float32], %stage2_unit4_bn2_moving_var: Tensor[(128), float32], %stage2_unit4_conv2_weight: Tensor[(128, 128, 3, 3), float32], %stage2_unit4_bn3_gamma: Tensor[(128), float32], %stage2_unit4_bn3_beta: Tensor[(128), float32], %stage2_unit4_bn3_moving_mean: Tensor[(128), float32], %stage2_unit4_bn3_moving_var: Tensor[(128), float32], %stage2_unit4_conv3_weight: Tensor[(512, 128, 1, 1), float32], %stage3_unit1_bn1_gamma: Tensor[(512), float32], %stage3_unit1_bn1_beta: Tensor[(512), float32], %stage3_unit1_bn1_moving_mean: Tensor[(512), float32], %stage3_unit1_bn1_moving_var: Tensor[(512), float32], %stage3_unit1_conv1_weight: Tensor[(256, 512, 1, 1), float32], %stage3_unit1_bn2_gamma: Tensor[(256), float32], %stage3_unit1_bn2_beta: Tensor[(256), float32], %stage3_unit1_bn2_moving_mean: Tensor[(256), float32], %stage3_unit1_bn2_moving_var: Tensor[(256), float32], %stage3_unit1_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit1_bn3_gamma: Tensor[(256), float32], %stage3_unit1_bn3_beta: Tensor[(256), float32], %stage3_unit1_bn3_moving_mean: Tensor[(256), float32], %stage3_unit1_bn3_moving_var: Tensor[(256), float32], %stage3_unit1_conv3_weight: Tensor[(1024, 256, 1, 1), float32], %stage3_unit1_sc_weight: Tensor[(1024, 512, 1, 1), float32], %stage3_unit2_bn1_gamma: Tensor[(1024), float32], %stage3_unit2_bn1_beta: Tensor[(1024), float32], %stage3_unit2_bn1_moving_mean: Tensor[(1024), float32], %stage3_unit2_bn1_moving_var: Tensor[(1024), float32], %stage3_unit2_conv1_weight: Tensor[(256, 1024, 1, 1), float32], %stage3_unit2_bn2_gamma: Tensor[(256), float32], %stage3_unit2_bn2_beta: Tensor[(256), float32], %stage3_unit2_bn2_moving_mean: Tensor[(256), float32], %stage3_unit2_bn2_moving_var: Tensor[(256), float32], %stage3_unit2_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit2_bn3_gamma: Tensor[(256), float32], %stage3_unit2_bn3_beta: Tensor[(256), float32], %stage3_unit2_bn3_moving_mean: Tensor[(256), float32], %stage3_unit2_bn3_moving_var: Tensor[(256), float32], %stage3_unit2_conv3_weight: Tensor[(1024, 256, 1, 1), float32], %stage3_unit3_bn1_gamma: Tensor[(1024), float32], %stage3_unit3_bn1_beta: Tensor[(1024), float32], %stage3_unit3_bn1_moving_mean: Tensor[(1024), float32], %stage3_unit3_bn1_moving_var: Tensor[(1024), float32], %stage3_unit3_conv1_weight: Tensor[(256, 1024, 1, 1), float32], %stage3_unit3_bn2_gamma: Tensor[(256), float32], %stage3_unit3_bn2_beta: Tensor[(256), float32], %stage3_unit3_bn2_moving_mean: Tensor[(256), float32], %stage3_unit3_bn2_moving_var: Tensor[(256), float32], %stage3_unit3_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit3_bn3_gamma: Tensor[(256), float32], %stage3_unit3_bn3_beta: Tensor[(256), float32], %stage3_unit3_bn3_moving_mean: Tensor[(256), float32], %stage3_unit3_bn3_moving_var: Tensor[(256), float32], %stage3_unit3_conv3_weight: Tensor[(1024, 256, 1, 1), float32], %stage3_unit4_bn1_gamma: Tensor[(1024), float32], %stage3_unit4_bn1_beta: Tensor[(1024), float32], %stage3_unit4_bn1_moving_mean: Tensor[(1024), float32], %stage3_unit4_bn1_moving_var: Tensor[(1024), float32], %stage3_unit4_conv1_weight: Tensor[(256, 1024, 1, 1), float32], %stage3_unit4_bn2_gamma: Tensor[(256), float32], %stage3_unit4_bn2_beta: Tensor[(256), float32], %stage3_unit4_bn2_moving_mean: Tensor[(256), float32], %stage3_unit4_bn2_moving_var: Tensor[(256), float32], %stage3_unit4_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit4_bn3_gamma: Tensor[(256), float32], %stage3_unit4_bn3_beta: Tensor[(256), float32], %stage3_unit4_bn3_moving_mean: Tensor[(256), float32], %stage3_unit4_bn3_moving_var: Tensor[(256), float32], %stage3_unit4_conv3_weight: Tensor[(1024, 256, 1, 1), float32], %stage3_unit5_bn1_gamma: Tensor[(1024), float32], %stage3_unit5_bn1_beta: Tensor[(1024), float32], %stage3_unit5_bn1_moving_mean: Tensor[(1024), float32], %stage3_unit5_bn1_moving_var: Tensor[(1024), float32], %stage3_unit5_conv1_weight: Tensor[(256, 1024, 1, 1), float32], %stage3_unit5_bn2_gamma: Tensor[(256), float32], %stage3_unit5_bn2_beta: Tensor[(256), float32], %stage3_unit5_bn2_moving_mean: Tensor[(256), float32], %stage3_unit5_bn2_moving_var: Tensor[(256), float32], %stage3_unit5_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit5_bn3_gamma: Tensor[(256), float32], %stage3_unit5_bn3_beta: Tensor[(256), float32], %stage3_unit5_bn3_moving_mean: Tensor[(256), float32], %stage3_unit5_bn3_moving_var: Tensor[(256), float32], %stage3_unit5_conv3_weight: Tensor[(1024, 256, 1, 1), float32], %stage3_unit6_bn1_gamma: Tensor[(1024), float32], %stage3_unit6_bn1_beta: Tensor[(1024), float32], %stage3_unit6_bn1_moving_mean: Tensor[(1024), float32], %stage3_unit6_bn1_moving_var: Tensor[(1024), float32], %stage3_unit6_conv1_weight: Tensor[(256, 1024, 1, 1), float32], %stage3_unit6_bn2_gamma: Tensor[(256), float32], %stage3_unit6_bn2_beta: Tensor[(256), float32], %stage3_unit6_bn2_moving_mean: Tensor[(256), float32], %stage3_unit6_bn2_moving_var: Tensor[(256), float32], %stage3_unit6_conv2_weight: Tensor[(256, 256, 3, 3), float32], %stage3_unit6_bn3_gamma: Tensor[(256), float32], %stage3_unit6_bn3_beta: Tensor[(256), float32], %stage3_unit6_bn3_moving_mean: Tensor[(256), float32], %stage3_unit6_bn3_moving_var: Tensor[(256), float32], %stage3_unit6_conv3_weight: Tensor[(1024, 256, 1, 1), float32], %stage4_unit1_bn1_gamma: Tensor[(1024), float32], %stage4_unit1_bn1_beta: Tensor[(1024), float32], %stage4_unit1_bn1_moving_mean: Tensor[(1024), float32], %stage4_unit1_bn1_moving_var: Tensor[(1024), float32], %stage4_unit1_conv1_weight: Tensor[(512, 1024, 1, 1), float32], %stage4_unit1_bn2_gamma: Tensor[(512), float32], %stage4_unit1_bn2_beta: Tensor[(512), float32], %stage4_unit1_bn2_moving_mean: Tensor[(512), float32], %stage4_unit1_bn2_moving_var: Tensor[(512), float32], %stage4_unit1_conv2_weight: Tensor[(512, 512, 3, 3), float32], %stage4_unit1_bn3_gamma: Tensor[(512), float32], %stage4_unit1_bn3_beta: Tensor[(512), float32], %stage4_unit1_bn3_moving_mean: Tensor[(512), float32], %stage4_unit1_bn3_moving_var: Tensor[(512), float32], %stage4_unit1_conv3_weight: Tensor[(2048, 512, 1, 1), float32], %stage4_unit1_sc_weight: Tensor[(2048, 1024, 1, 1), float32], %stage4_unit2_bn1_gamma: Tensor[(2048), float32], %stage4_unit2_bn1_beta: Tensor[(2048), float32], %stage4_unit2_bn1_moving_mean: Tensor[(2048), float32], %stage4_unit2_bn1_moving_var: Tensor[(2048), float32], %stage4_unit2_conv1_weight: Tensor[(512, 2048, 1, 1), float32], %stage4_unit2_bn2_gamma: Tensor[(512), float32], %stage4_unit2_bn2_beta: Tensor[(512), float32], %stage4_unit2_bn2_moving_mean: Tensor[(512), float32], %stage4_unit2_bn2_moving_var: Tensor[(512), float32], %stage4_unit2_conv2_weight: Tensor[(512, 512, 3, 3), float32], %stage4_unit2_bn3_gamma: Tensor[(512), float32], %stage4_unit2_bn3_beta: Tensor[(512), float32], %stage4_unit2_bn3_moving_mean: Tensor[(512), float32], %stage4_unit2_bn3_moving_var: Tensor[(512), float32], %stage4_unit2_conv3_weight: Tensor[(2048, 512, 1, 1), float32], %stage4_unit3_bn1_gamma: Tensor[(2048), float32], %stage4_unit3_bn1_beta: Tensor[(2048), float32], %stage4_unit3_bn1_moving_mean: Tensor[(2048), float32], %stage4_unit3_bn1_moving_var: Tensor[(2048), float32], %stage4_unit3_conv1_weight: Tensor[(512, 2048, 1, 1), float32], %stage4_unit3_bn2_gamma: Tensor[(512), float32], %stage4_unit3_bn2_beta: Tensor[(512), float32], %stage4_unit3_bn2_moving_mean: Tensor[(512), float32], %stage4_unit3_bn2_moving_var: Tensor[(512), float32], %stage4_unit3_conv2_weight: Tensor[(512, 512, 3, 3), float32], %stage4_unit3_bn3_gamma: Tensor[(512), float32], %stage4_unit3_bn3_beta: Tensor[(512), float32], %stage4_unit3_bn3_moving_mean: Tensor[(512), float32], %stage4_unit3_bn3_moving_var: Tensor[(512), float32], %stage4_unit3_conv3_weight: Tensor[(2048, 512, 1, 1), float32], %bn1_gamma: Tensor[(2048), float32], %bn1_beta: Tensor[(2048), float32], %bn1_moving_mean: Tensor[(2048), float32], %bn1_moving_var: Tensor[(2048), float32], %fc1_weight: Tensor[(1000, 2048), float32], %fc1_bias: Tensor[(1000), float32]) -> Tensor[(1, 1000), float32] {
  %0 = nn.batch_norm(%data, %bn_data_gamma, %bn_data_beta, %bn_data_moving_mean, %bn_data_moving_var, epsilon=2e-05f, scale=False) /* ty=(Tensor[(1, 3, 224, 224), float32], Tensor[(3), float32], Tensor[(3), float32]) */;
  %1 = %0.0;
  %2 = nn.conv2d(%1, %conv0_weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %3 = nn.batch_norm(%2, %bn0_gamma, %bn0_beta, %bn0_moving_mean, %bn0_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %4 = %3.0;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %6 = nn.max_pool2d(%5, pool_size=[3, 3], strides=[2, 2], padding=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %7 = nn.batch_norm(%6, %stage1_unit1_bn1_gamma, %stage1_unit1_bn1_beta, %stage1_unit1_bn1_moving_mean, %stage1_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %8 = %7.0;
  %9 = nn.relu(%8) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %10 = nn.conv2d(%9, %stage1_unit1_conv1_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %11 = nn.batch_norm(%10, %stage1_unit1_bn2_gamma, %stage1_unit1_bn2_beta, %stage1_unit1_bn2_moving_mean, %stage1_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %12 = %11.0;
  %13 = nn.relu(%12) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %14 = nn.conv2d(%13, %stage1_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %15 = nn.batch_norm(%14, %stage1_unit1_bn3_gamma, %stage1_unit1_bn3_beta, %stage1_unit1_bn3_moving_mean, %stage1_unit1_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %16 = %15.0;
  %17 = nn.relu(%16) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %18 = nn.conv2d(%17, %stage1_unit1_conv3_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %19 = nn.conv2d(%9, %stage1_unit1_sc_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %20 = add(%18, %19) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %21 = nn.batch_norm(%20, %stage1_unit2_bn1_gamma, %stage1_unit2_bn1_beta, %stage1_unit2_bn1_moving_mean, %stage1_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %22 = %21.0;
  %23 = nn.relu(%22) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %24 = nn.conv2d(%23, %stage1_unit2_conv1_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %25 = nn.batch_norm(%24, %stage1_unit2_bn2_gamma, %stage1_unit2_bn2_beta, %stage1_unit2_bn2_moving_mean, %stage1_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %26 = %25.0;
  %27 = nn.relu(%26) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %28 = nn.conv2d(%27, %stage1_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %29 = nn.batch_norm(%28, %stage1_unit2_bn3_gamma, %stage1_unit2_bn3_beta, %stage1_unit2_bn3_moving_mean, %stage1_unit2_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %30 = %29.0;
  %31 = nn.relu(%30) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %32 = nn.conv2d(%31, %stage1_unit2_conv3_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %33 = add(%32, %20) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %34 = nn.batch_norm(%33, %stage1_unit3_bn1_gamma, %stage1_unit3_bn1_beta, %stage1_unit3_bn1_moving_mean, %stage1_unit3_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %35 = %34.0;
  %36 = nn.relu(%35) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %37 = nn.conv2d(%36, %stage1_unit3_conv1_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %38 = nn.batch_norm(%37, %stage1_unit3_bn2_gamma, %stage1_unit3_bn2_beta, %stage1_unit3_bn2_moving_mean, %stage1_unit3_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %39 = %38.0;
  %40 = nn.relu(%39) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %41 = nn.conv2d(%40, %stage1_unit3_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %42 = nn.batch_norm(%41, %stage1_unit3_bn3_gamma, %stage1_unit3_bn3_beta, %stage1_unit3_bn3_moving_mean, %stage1_unit3_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %43 = %42.0;
  %44 = nn.relu(%43) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %45 = nn.conv2d(%44, %stage1_unit3_conv3_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %46 = add(%45, %33) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %47 = nn.batch_norm(%46, %stage2_unit1_bn1_gamma, %stage2_unit1_bn1_beta, %stage2_unit1_bn1_moving_mean, %stage2_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %48 = %47.0;
  %49 = nn.relu(%48) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %50 = nn.conv2d(%49, %stage2_unit1_conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %51 = nn.batch_norm(%50, %stage2_unit1_bn2_gamma, %stage2_unit1_bn2_beta, %stage2_unit1_bn2_moving_mean, %stage2_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %52 = %51.0;
  %53 = nn.relu(%52) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %54 = nn.conv2d(%53, %stage2_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %55 = nn.batch_norm(%54, %stage2_unit1_bn3_gamma, %stage2_unit1_bn3_beta, %stage2_unit1_bn3_moving_mean, %stage2_unit1_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %56 = %55.0;
  %57 = nn.relu(%56) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %58 = nn.conv2d(%57, %stage2_unit1_conv3_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %59 = nn.conv2d(%49, %stage2_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %60 = add(%58, %59) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %61 = nn.batch_norm(%60, %stage2_unit2_bn1_gamma, %stage2_unit2_bn1_beta, %stage2_unit2_bn1_moving_mean, %stage2_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %62 = %61.0;
  %63 = nn.relu(%62) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %64 = nn.conv2d(%63, %stage2_unit2_conv1_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %65 = nn.batch_norm(%64, %stage2_unit2_bn2_gamma, %stage2_unit2_bn2_beta, %stage2_unit2_bn2_moving_mean, %stage2_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %66 = %65.0;
  %67 = nn.relu(%66) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %68 = nn.conv2d(%67, %stage2_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %69 = nn.batch_norm(%68, %stage2_unit2_bn3_gamma, %stage2_unit2_bn3_beta, %stage2_unit2_bn3_moving_mean, %stage2_unit2_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %70 = %69.0;
  %71 = nn.relu(%70) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %72 = nn.conv2d(%71, %stage2_unit2_conv3_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %73 = add(%72, %60) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %74 = nn.batch_norm(%73, %stage2_unit3_bn1_gamma, %stage2_unit3_bn1_beta, %stage2_unit3_bn1_moving_mean, %stage2_unit3_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %75 = %74.0;
  %76 = nn.relu(%75) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %77 = nn.conv2d(%76, %stage2_unit3_conv1_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %78 = nn.batch_norm(%77, %stage2_unit3_bn2_gamma, %stage2_unit3_bn2_beta, %stage2_unit3_bn2_moving_mean, %stage2_unit3_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %79 = %78.0;
  %80 = nn.relu(%79) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %81 = nn.conv2d(%80, %stage2_unit3_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %82 = nn.batch_norm(%81, %stage2_unit3_bn3_gamma, %stage2_unit3_bn3_beta, %stage2_unit3_bn3_moving_mean, %stage2_unit3_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %83 = %82.0;
  %84 = nn.relu(%83) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %85 = nn.conv2d(%84, %stage2_unit3_conv3_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %86 = add(%85, %73) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %87 = nn.batch_norm(%86, %stage2_unit4_bn1_gamma, %stage2_unit4_bn1_beta, %stage2_unit4_bn1_moving_mean, %stage2_unit4_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %88 = %87.0;
  %89 = nn.relu(%88) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %90 = nn.conv2d(%89, %stage2_unit4_conv1_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %91 = nn.batch_norm(%90, %stage2_unit4_bn2_gamma, %stage2_unit4_bn2_beta, %stage2_unit4_bn2_moving_mean, %stage2_unit4_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %92 = %91.0;
  %93 = nn.relu(%92) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %94 = nn.conv2d(%93, %stage2_unit4_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %95 = nn.batch_norm(%94, %stage2_unit4_bn3_gamma, %stage2_unit4_bn3_beta, %stage2_unit4_bn3_moving_mean, %stage2_unit4_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %96 = %95.0;
  %97 = nn.relu(%96) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %98 = nn.conv2d(%97, %stage2_unit4_conv3_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %99 = add(%98, %86) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %100 = nn.batch_norm(%99, %stage3_unit1_bn1_gamma, %stage3_unit1_bn1_beta, %stage3_unit1_bn1_moving_mean, %stage3_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %101 = %100.0;
  %102 = nn.relu(%101) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %103 = nn.conv2d(%102, %stage3_unit1_conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %104 = nn.batch_norm(%103, %stage3_unit1_bn2_gamma, %stage3_unit1_bn2_beta, %stage3_unit1_bn2_moving_mean, %stage3_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %105 = %104.0;
  %106 = nn.relu(%105) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %107 = nn.conv2d(%106, %stage3_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %108 = nn.batch_norm(%107, %stage3_unit1_bn3_gamma, %stage3_unit1_bn3_beta, %stage3_unit1_bn3_moving_mean, %stage3_unit1_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %109 = %108.0;
  %110 = nn.relu(%109) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %111 = nn.conv2d(%110, %stage3_unit1_conv3_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %112 = nn.conv2d(%102, %stage3_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %113 = add(%111, %112) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %114 = nn.batch_norm(%113, %stage3_unit2_bn1_gamma, %stage3_unit2_bn1_beta, %stage3_unit2_bn1_moving_mean, %stage3_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %115 = %114.0;
  %116 = nn.relu(%115) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %117 = nn.conv2d(%116, %stage3_unit2_conv1_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %118 = nn.batch_norm(%117, %stage3_unit2_bn2_gamma, %stage3_unit2_bn2_beta, %stage3_unit2_bn2_moving_mean, %stage3_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %119 = %118.0;
  %120 = nn.relu(%119) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %121 = nn.conv2d(%120, %stage3_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %122 = nn.batch_norm(%121, %stage3_unit2_bn3_gamma, %stage3_unit2_bn3_beta, %stage3_unit2_bn3_moving_mean, %stage3_unit2_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %123 = %122.0;
  %124 = nn.relu(%123) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %125 = nn.conv2d(%124, %stage3_unit2_conv3_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %126 = add(%125, %113) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %127 = nn.batch_norm(%126, %stage3_unit3_bn1_gamma, %stage3_unit3_bn1_beta, %stage3_unit3_bn1_moving_mean, %stage3_unit3_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %128 = %127.0;
  %129 = nn.relu(%128) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %130 = nn.conv2d(%129, %stage3_unit3_conv1_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %131 = nn.batch_norm(%130, %stage3_unit3_bn2_gamma, %stage3_unit3_bn2_beta, %stage3_unit3_bn2_moving_mean, %stage3_unit3_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %132 = %131.0;
  %133 = nn.relu(%132) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %134 = nn.conv2d(%133, %stage3_unit3_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %135 = nn.batch_norm(%134, %stage3_unit3_bn3_gamma, %stage3_unit3_bn3_beta, %stage3_unit3_bn3_moving_mean, %stage3_unit3_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %136 = %135.0;
  %137 = nn.relu(%136) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %138 = nn.conv2d(%137, %stage3_unit3_conv3_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %139 = add(%138, %126) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %140 = nn.batch_norm(%139, %stage3_unit4_bn1_gamma, %stage3_unit4_bn1_beta, %stage3_unit4_bn1_moving_mean, %stage3_unit4_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %141 = %140.0;
  %142 = nn.relu(%141) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %143 = nn.conv2d(%142, %stage3_unit4_conv1_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %144 = nn.batch_norm(%143, %stage3_unit4_bn2_gamma, %stage3_unit4_bn2_beta, %stage3_unit4_bn2_moving_mean, %stage3_unit4_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %145 = %144.0;
  %146 = nn.relu(%145) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %147 = nn.conv2d(%146, %stage3_unit4_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %148 = nn.batch_norm(%147, %stage3_unit4_bn3_gamma, %stage3_unit4_bn3_beta, %stage3_unit4_bn3_moving_mean, %stage3_unit4_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %149 = %148.0;
  %150 = nn.relu(%149) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %151 = nn.conv2d(%150, %stage3_unit4_conv3_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %152 = add(%151, %139) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %153 = nn.batch_norm(%152, %stage3_unit5_bn1_gamma, %stage3_unit5_bn1_beta, %stage3_unit5_bn1_moving_mean, %stage3_unit5_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %154 = %153.0;
  %155 = nn.relu(%154) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %156 = nn.conv2d(%155, %stage3_unit5_conv1_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %157 = nn.batch_norm(%156, %stage3_unit5_bn2_gamma, %stage3_unit5_bn2_beta, %stage3_unit5_bn2_moving_mean, %stage3_unit5_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %158 = %157.0;
  %159 = nn.relu(%158) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %160 = nn.conv2d(%159, %stage3_unit5_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %161 = nn.batch_norm(%160, %stage3_unit5_bn3_gamma, %stage3_unit5_bn3_beta, %stage3_unit5_bn3_moving_mean, %stage3_unit5_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %162 = %161.0;
  %163 = nn.relu(%162) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %164 = nn.conv2d(%163, %stage3_unit5_conv3_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %165 = add(%164, %152) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %166 = nn.batch_norm(%165, %stage3_unit6_bn1_gamma, %stage3_unit6_bn1_beta, %stage3_unit6_bn1_moving_mean, %stage3_unit6_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %167 = %166.0;
  %168 = nn.relu(%167) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %169 = nn.conv2d(%168, %stage3_unit6_conv1_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %170 = nn.batch_norm(%169, %stage3_unit6_bn2_gamma, %stage3_unit6_bn2_beta, %stage3_unit6_bn2_moving_mean, %stage3_unit6_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %171 = %170.0;
  %172 = nn.relu(%171) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %173 = nn.conv2d(%172, %stage3_unit6_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %174 = nn.batch_norm(%173, %stage3_unit6_bn3_gamma, %stage3_unit6_bn3_beta, %stage3_unit6_bn3_moving_mean, %stage3_unit6_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %175 = %174.0;
  %176 = nn.relu(%175) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %177 = nn.conv2d(%176, %stage3_unit6_conv3_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %178 = add(%177, %165) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %179 = nn.batch_norm(%178, %stage4_unit1_bn1_gamma, %stage4_unit1_bn1_beta, %stage4_unit1_bn1_moving_mean, %stage4_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %180 = %179.0;
  %181 = nn.relu(%180) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %182 = nn.conv2d(%181, %stage4_unit1_conv1_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %183 = nn.batch_norm(%182, %stage4_unit1_bn2_gamma, %stage4_unit1_bn2_beta, %stage4_unit1_bn2_moving_mean, %stage4_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %184 = %183.0;
  %185 = nn.relu(%184) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %186 = nn.conv2d(%185, %stage4_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %187 = nn.batch_norm(%186, %stage4_unit1_bn3_gamma, %stage4_unit1_bn3_beta, %stage4_unit1_bn3_moving_mean, %stage4_unit1_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %188 = %187.0;
  %189 = nn.relu(%188) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %190 = nn.conv2d(%189, %stage4_unit1_conv3_weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %191 = nn.conv2d(%181, %stage4_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %192 = add(%190, %191) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %193 = nn.batch_norm(%192, %stage4_unit2_bn1_gamma, %stage4_unit2_bn1_beta, %stage4_unit2_bn1_moving_mean, %stage4_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %194 = %193.0;
  %195 = nn.relu(%194) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %196 = nn.conv2d(%195, %stage4_unit2_conv1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %197 = nn.batch_norm(%196, %stage4_unit2_bn2_gamma, %stage4_unit2_bn2_beta, %stage4_unit2_bn2_moving_mean, %stage4_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %198 = %197.0;
  %199 = nn.relu(%198) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %200 = nn.conv2d(%199, %stage4_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %201 = nn.batch_norm(%200, %stage4_unit2_bn3_gamma, %stage4_unit2_bn3_beta, %stage4_unit2_bn3_moving_mean, %stage4_unit2_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %202 = %201.0;
  %203 = nn.relu(%202) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %204 = nn.conv2d(%203, %stage4_unit2_conv3_weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %205 = add(%204, %192) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %206 = nn.batch_norm(%205, %stage4_unit3_bn1_gamma, %stage4_unit3_bn1_beta, %stage4_unit3_bn1_moving_mean, %stage4_unit3_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %207 = %206.0;
  %208 = nn.relu(%207) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %209 = nn.conv2d(%208, %stage4_unit3_conv1_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %210 = nn.batch_norm(%209, %stage4_unit3_bn2_gamma, %stage4_unit3_bn2_beta, %stage4_unit3_bn2_moving_mean, %stage4_unit3_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %211 = %210.0;
  %212 = nn.relu(%211) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %213 = nn.conv2d(%212, %stage4_unit3_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %214 = nn.batch_norm(%213, %stage4_unit3_bn3_gamma, %stage4_unit3_bn3_beta, %stage4_unit3_bn3_moving_mean, %stage4_unit3_bn3_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %215 = %214.0;
  %216 = nn.relu(%215) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %217 = nn.conv2d(%216, %stage4_unit3_conv3_weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %218 = add(%217, %205) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %219 = nn.batch_norm(%218, %bn1_gamma, %bn1_beta, %bn1_moving_mean, %bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %220 = %219.0;
  %221 = nn.relu(%220) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %222 = nn.global_avg_pool2d(%221) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %223 = nn.batch_flatten(%222) /* ty=Tensor[(1, 2048), float32] */;
  %224 = nn.dense(%223, %fc1_weight, units=1000) /* ty=Tensor[(1, 1000), float32] */;
  %225 = nn.bias_add(%224, %fc1_bias, axis=-1) /* ty=Tensor[(1, 1000), float32] */;
  nn.softmax(%225) /* ty=Tensor[(1, 1000), float32] */
}

